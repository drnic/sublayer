---
http_interactions:
- request:
    method: post
    uri: https://api.anthropic.com/v1/messages
    body:
      encoding: UTF-8
      string: '{"model":"claude-3-haiku-20240307","max_tokens":4096,"system":"        In
        this environment you have access to a set of tools you can use to answer the
        user''s question.\n\n        You may call them like this:\n        <function_calls>\n        <invoke>\n          <tool_name>$TOOL_NAME</tool_name>\n          <parameters>\n          <$PARAMETER_NAME>$PARAMETER_VALUE</$PARAMETER_NAME>\n          ...\n          </parameters>\n        </invoke>\n        </function_calls>\n\n        Here
        are the tools available:\n        <tools>\n                    <tool_description>\n              <tool_name>code_description</tool_name>\n              <tool_description>A
        description of what the code in the file does</tool_description>\n              <parameters>\n                <name>code_description</name>\n                <type>string</type>\n                <description>A
        description of what the code in the file does</description>\n              </parameters>\n            </tool_description>\n\n        </tools>\n\n        Respond
        only with valid xml. The entire response should be wrapped in a <response>
        tag. Any additional information not inside a tool call should go in a <scratch>
        tag.\n","messages":[{"role":"user","content":"        You are an experienced
        software engineer. Below is a chunk of code:\n\n        #!/usr/bin/env ruby\n\n      require
        ''optparse''\n\n      options = {}\n      OptionParser.new do |opts|\n        opts.banner
        = \"Usage: hello.rb [options]\"\n\n        opts.on(\"-w\", \"--who PERSON\",
        \"Name of the person to greet\") do |person|\n          options[:who] = person\n        end\n      end.parse!\n\n      who
        = options[:who] || \"world\"\n      puts \"Hello, #{who}!\"\n\n        Please
        read the code carefully and provide a high-level description of what this
        code does, including its purpose, functionalities, and any noteworthy details.\n"}]}'
    headers:
      X-Api-Key:
      - "<ANTHROPIC_API_KEY>"
      Anthropic-Version:
      - '2023-06-01'
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 17 Apr 2024 09:34:28 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Anthropic-Ratelimit-Requests-Limit:
      - '5'
      Anthropic-Ratelimit-Requests-Remaining:
      - '4'
      Anthropic-Ratelimit-Requests-Reset:
      - '2024-04-17T09:35:17Z'
      Anthropic-Ratelimit-Tokens-Limit:
      - '25000'
      Anthropic-Ratelimit-Tokens-Remaining:
      - '24000'
      Anthropic-Ratelimit-Tokens-Reset:
      - '2024-04-17T09:35:17Z'
      Request-Id:
      - req_01GugQ1Ehs1z7UvWHM4MhWjy
      X-Cloud-Trace-Context:
      - 60cbfc591cfeedba09257b6da897a307
      Via:
      - 1.1 google
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 875b6b4b8eef5e8c-BNE
    body:
      encoding: ASCII-8BIT
      string: '{"id":"msg_016vX9TBkeLsSrALS5yfYJcm","type":"message","role":"assistant","model":"claude-3-haiku-20240307","stop_sequence":null,"usage":{"input_tokens":433,"output_tokens":314},"content":[{"type":"text","text":"<response>\n<invoke>\n  <tool_name>code_description</tool_name>\n  <parameters>\n    <code_description>\nThis
        Ruby script is a simple command-line application that prints a greeting message.
        It uses the `optparse` library to handle command-line arguments.\n\nThe script
        defines an `options` hash to store any command-line arguments passed to it.
        It then creates an `OptionParser` object and configures it to accept a single
        optional argument `-w` or `--who`, which allows the user to specify the name
        of the person to greet.\n\nIf the `--who` option is provided, the script stores
        the supplied value in the `options[:who]` hash. If no `--who` option is provided,
        the script defaults to using the word \"world\" as the person to greet.\n\nFinally,
        the script prints the greeting message \"Hello, [person]!\" using the value
        stored in the `who` variable.\n    </code_description>\n  </parameters>\n</invoke>\n</response>\n\n<scratch>\nIn
        summary, this Ruby script is a simple command-line application that allows
        the user to pass an optional command-line argument to specify the name of
        the person to greet. If no argument is provided, it defaults to greeting \"world\".
        The script demonstrates the use of the `optparse` library to handle command-line
        arguments in a Ruby program.\n</scratch>"}],"stop_reason":"end_turn"}'
  recorded_at: Wed, 17 Apr 2024 09:34:28 GMT
recorded_with: VCR 6.2.0
